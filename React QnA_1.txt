What is purpose of index.css?
It is a global CSS file that serves as the main stylesheet for the entire application.

What is purpose of App.text.js?
It is used for writing tests for the App.js file.

What is purpose of index.js?
It is Entry point for JavaScript. Renders the main React component(App) into the root DOM element.

What is Stateful or State Management?
Stateful or State Management means when a user performs some actions on the UI, then the React application should
be able to "update and re-render that data or state" on the UI.

What is Context?
Context provides a way to pass data through the component tree without having to pass props down manually at every level.

What is term "render prop"?
The term "render prop" refers to a technique of sharing code between React Components using a prop whose value is a function.

What is React.memo?
React.memo is higher order component that will prevent functional component from being re-rendered it it's props or state do not change.

What is HOC?
Higher Order Components(HOC) is a pattern where a function takes a component as an argument and returns a new component.

  for ex: const newcomponent = higherOrderComponent( originalcomponent )

  const newcomponent is a function called higherorderComponent and we pass in the original component as argument typically an hoc adds additionally data or functionality to the original component so the new component also be referred as enhanced component

  for ex: const IronMan =WithSuit(TonyStark) where Withsuit is function which have TonyStark as parameter, 
  here TonyStark is original component withsuit is function that will enhance TonyStark and return IronMan which is enhanced component

  From React point of view, we have a function which accepts the original component adds functionality and returns an enhanced component or in other words we have the hoc pattern.

What is prop drilling?
Prop drilling is the process of passing down props through multiple layers of the components.

What is Error Boundaries?
1)Error Boundaries are React components that catch Javascript error in their child component tree, log those errors,and display a fall back UI.
2)A class component becomes an Error Boundary by defining either or both of getDerivedStateFromError and componentDidCatch lifecycle methods
3)The Placement of the Error Boundary also matters as it controls if the entire app should have the fall-back UI or just the component causing the problem.
4)Provide a way to gracefully handle error in application code.


What is Hooks in Reactjs?
1)Hooks are a feature in React, which allows to use state and lifecycle features without having to write a class.
2)Hooks don't work inside classes
Rules of Hooks:
1) "Only Call Hooks at the Top Level"- Don't call Hooks inside loops, conditions, or nested functions.
2) "Only Call Hooks from React Functions" - Call them from within React Functional Components and not just any 
                                            regular Javascript function.

What are types of Hooks?
In React.js, there are several types of hooks categorized based on their functionality. Some of the most commonly used types of hooks include:

1. State Hooks:
   - useState: Allows functional components to manage state.
2. Reducer Hook:
   - useReducer: Alternative to useState. Accepts a reducer function with the current state and an action, returns the new state
3. Context Hooks:
   - useContext: Allows functional components to consume context provided by a Context Provider.
4. Effect Hooks:
   - useEffect: Enables performing side effects in functional components, like data fetching, subscriptions, or manually changing the DOM.
   - useLayoutEffect: Similar to useEffect but fires synchronously after all DOM mutations.
   - useRef: Provides a mutable ref object whose .current property is initialized to the passed argument (useful for accessing DOM elements or storing mutable values without causing re-renders).
5. Callback Hook:
   - useCallback: Returns a memoized callback.
6. Memoization Hooks:
   - useMemo: Returns a memoized value.
7. Effect Cleanup Hooks:
   - useLayoutEffect and useEffect can also return a cleanup function to perform any necessary cleanup, such as unsubscribing from an event listener or cancelling a timer.
8. Custom Hooks:
   - Custom hooks are user-defined hooks that allow you to extract component logic into reusable functions. They can use other built-in hooks inside them. Custom hooks typically start with the word "use" to adhere to the hook naming convention.


These hooks enable developers to write more modular and readable code by encapsulating logic and behavior within functional components. They are a powerful feature of React.js that significantly improves the development experience.

What is useState Hook?
useState is a built-in React hook that allows functional components to manage state. It provides a way to add stateful logic to functional components without converting them into class components.

The useState hook returns a pair of values: the current state and a function that allows you to update that state. The function returned by useState lets you modify the state, and when you do so, React automatically re-renders the component to reflect the updated state.

What is array destructuring?
The concept of assign array elements to individual variables is called array destructuring.

What is useEffect Hook?
The useEffect hook in React is used to perform side effects in functional components. Side effects may include data fetching, subscriptions, or manually changing the DOM in React components. useEffect is called after every render and allows you to execute code that needs to run asynchronously or imperatively in response to certain events.useEffect function will accept two parameters suchas Effect function & Dependency Array.

What is Dependency Array?
Dependency Arrays act as triggers for useEffect to rerun; meaning if any of dependencies values change, the code
inside useEffect will be executed again.

What is the meaning of empty array[] in the useEffect()?
An empty array[] indicates that the effect function should only run once.


What is useContext Hook?
useContext in React provides a way to pass data from parent to child component without using props.
The useContext hook in React.js allows functional components to consume context that has been provided by a Context.Provider higher up in the component tree without using the traditional context API's Consumer component. It provides a more elegant and concise way to access context within functional components.

What is createContext() method? What are Provider & Consumer properties?
createContext() function returns an object with Provider and Consumer properties.
The Provider property is responsible for providing the context value to all its child components.
useContext() method or Consumer Property can be used to consume the context value in child components.

What is useReducer Hook?
useReducer is a hook that is used for state management in React
useReducer is related to reducer functions
useState is built using useReducer and so useReducer is most primitive one comparing to useState

useReducer(reducer,initialState)
newState=reducer(currentState,action)'
useReducer returns a pair of values[newState,dispatch]

The useReducer hook in React is another way to manage state in functional components. It is an alternative to the useState hook and is particularly useful for managing more complex state logic that involves multiple sub-values or when the next state depends on the previous one.

Here's how useReducer works:

Reducer Function:
First, you need to define a reducer function. This function takes two arguments: the current state and an action, and returns the new state based on the action. The reducer function is similar to the one used in Redux.

Initial State:
You also need to define the initial state, which represents the initial value of the state.

Dispatch Function:
useReducer returns an array with two elements: the current state and a dispatch function. The dispatch function allows you to dispatch actions to the reducer, which in turn updates the state.

What is useCallback Hook?
useCallback is a hook that will return a memoized version of the callback function that only changes if one of the dependencies has changed.
It is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary re-renders.

What is useRef Hook?
The useRef hook in React provides a way to create mutable references to elements or values that persist across renders. It is commonly used to access DOM elements or to store mutable values without causing re-renders.